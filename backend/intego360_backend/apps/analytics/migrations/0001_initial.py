# Generated by Django 5.2.1 on 2025-06-03 20:49

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('model_type', models.CharField(choices=[('regression', 'Regression'), ('classification', 'Classification'), ('clustering', 'Clustering'), ('forecasting', 'Time Series Forecasting'), ('anomaly_detection', 'Anomaly Detection'), ('recommendation', 'Recommendation System'), ('nlp', 'Natural Language Processing'), ('computer_vision', 'Computer Vision')], max_length=30)),
                ('algorithm', models.CharField(max_length=50)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('framework', models.CharField(choices=[('scikit_learn', 'Scikit-Learn'), ('tensorflow', 'TensorFlow'), ('pytorch', 'PyTorch'), ('xgboost', 'XGBoost'), ('custom', 'Custom')], max_length=30)),
                ('training_data_size', models.IntegerField(default=0)),
                ('training_date', models.DateTimeField(blank=True, null=True)),
                ('training_duration_minutes', models.FloatField(default=0.0)),
                ('accuracy_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('precision_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('recall_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('f1_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('model_file_path', models.CharField(blank=True, max_length=500)),
                ('model_size_mb', models.FloatField(default=0.0)),
                ('input_features', models.JSONField(default=list, help_text='List of input features')),
                ('output_format', models.JSONField(default=dict, help_text='Output format description')),
                ('is_active', models.BooleanField(default=True)),
                ('predictions_count', models.IntegerField(default=0)),
                ('last_prediction_time', models.DateTimeField(blank=True, null=True)),
                ('average_prediction_time_ms', models.FloatField(default=0.0)),
                ('deployment_status', models.CharField(choices=[('development', 'Development'), ('testing', 'Testing'), ('staging', 'Staging'), ('production', 'Production'), ('retired', 'Retired')], default='development', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'AI Model',
                'verbose_name_plural': 'AI Models',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('report_type', models.CharField(choices=[('performance', 'Performance Report'), ('trends', 'Trends Analysis'), ('predictions', 'Predictions'), ('insights', 'AI Insights'), ('comparative', 'Comparative Analysis'), ('executive', 'Executive Summary'), ('detailed', 'Detailed Analysis'), ('custom', 'Custom Report')], max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed'), ('scheduled', 'Scheduled')], default='draft', max_length=20)),
                ('sectors_covered', models.JSONField(default=list, help_text='List of sectors: agriculture, health, education')),
                ('date_range_start', models.DateField()),
                ('date_range_end', models.DateField()),
                ('comparison_period_start', models.DateField(blank=True, null=True)),
                ('comparison_period_end', models.DateField(blank=True, null=True)),
                ('parameters', models.JSONField(default=dict, help_text='Report generation parameters')),
                ('filters', models.JSONField(default=dict, help_text='Data filters applied')),
                ('metrics_included', models.JSONField(default=list, help_text='List of metrics to include')),
                ('visualization_types', models.JSONField(default=list, help_text='Charts and visualizations')),
                ('generated_data', models.JSONField(default=dict, help_text='Generated report data')),
                ('executive_summary', models.TextField(blank=True)),
                ('key_findings', models.JSONField(default=list, help_text='Key findings and insights')),
                ('recommendations', models.JSONField(default=list, help_text='AI-generated recommendations')),
                ('charts_data', models.JSONField(default=dict, help_text='Data for charts and visualizations')),
                ('ai_insights', models.JSONField(default=dict, help_text='AI-generated insights')),
                ('confidence_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('data_quality_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('is_automated', models.BooleanField(default=False)),
                ('generation_frequency', models.CharField(choices=[('manual', 'Manual'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('annually', 'Annually')], default='manual', max_length=20)),
                ('next_generation_date', models.DateTimeField(blank=True, null=True)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('json', 'JSON'), ('csv', 'CSV')], default='pdf', max_length=10)),
                ('file_size_mb', models.FloatField(default=0.0)),
                ('is_public', models.BooleanField(default=False)),
                ('shared_with_roles', models.JSONField(default=list, help_text='Roles that can access this report')),
                ('access_count', models.IntegerField(default=0)),
                ('generation_time_seconds', models.FloatField(default=0.0)),
                ('data_points_processed', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('generated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Analytics Report',
                'verbose_name_plural': 'Analytics Reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataQualityCheck',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_type', models.CharField(choices=[('completeness', 'Completeness'), ('accuracy', 'Accuracy'), ('consistency', 'Consistency'), ('timeliness', 'Timeliness'), ('validity', 'Validity'), ('uniqueness', 'Uniqueness')], max_length=30)),
                ('overall_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('detailed_results', models.JSONField(default=dict, help_text='Detailed quality check results')),
                ('issues_found', models.JSONField(default=list, help_text='List of issues identified')),
                ('recommendations', models.JSONField(default=list, help_text='Recommendations for improvement')),
                ('check_parameters', models.JSONField(default=dict, help_text='Parameters used for the check')),
                ('records_checked', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='completed', max_length=20)),
                ('check_duration_seconds', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Data Quality Check',
                'verbose_name_plural': 'Data Quality Checks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('source_type', models.CharField(choices=[('database', 'Database'), ('api', 'API'), ('file', 'File'), ('external', 'External Service'), ('manual', 'Manual Entry')], max_length=20)),
                ('connection_string', models.TextField(blank=True, help_text='Encrypted connection details')),
                ('api_endpoint', models.URLField(blank=True)),
                ('authentication_method', models.CharField(choices=[('none', 'None'), ('basic', 'Basic Auth'), ('token', 'Token'), ('oauth', 'OAuth'), ('key', 'API Key')], default='none', max_length=20)),
                ('table_name', models.CharField(blank=True, max_length=100)),
                ('primary_key_field', models.CharField(blank=True, max_length=50)),
                ('date_field', models.CharField(blank=True, max_length=50)),
                ('available_fields', models.JSONField(default=list, help_text='List of available fields')),
                ('is_active', models.BooleanField(default=True)),
                ('last_sync_time', models.DateTimeField(blank=True, null=True)),
                ('sync_frequency_hours', models.IntegerField(default=24)),
                ('data_quality_score', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('queries_count', models.IntegerField(default=0)),
                ('last_query_time', models.DateTimeField(blank=True, null=True)),
                ('average_response_time_ms', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Data Source',
                'verbose_name_plural': 'Data Sources',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Prediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sector', models.CharField(choices=[('agriculture', 'Agriculture'), ('health', 'Health'), ('education', 'Education'), ('cross_sector', 'Cross-Sector')], max_length=20)),
                ('input_data', models.JSONField(default=dict, help_text='Input data used for prediction')),
                ('input_data_hash', models.CharField(help_text='Hash of input data for deduplication', max_length=64)),
                ('prediction_result', models.JSONField(default=dict, help_text='Prediction output')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('prediction_type', models.CharField(choices=[('forecast', 'Forecast'), ('classification', 'Classification'), ('anomaly', 'Anomaly Detection'), ('recommendation', 'Recommendation'), ('risk_assessment', 'Risk Assessment')], max_length=30)),
                ('prediction_period_start', models.DateField(blank=True, null=True)),
                ('prediction_period_end', models.DateField(blank=True, null=True)),
                ('prediction_horizon_days', models.IntegerField(default=30)),
                ('is_validated', models.BooleanField(default=False)),
                ('actual_outcome', models.JSONField(blank=True, default=dict, help_text='Actual outcome for validation')),
                ('accuracy_assessment', models.FloatField(blank=True, null=True)),
                ('is_actionable', models.BooleanField(default=True)),
                ('action_taken', models.TextField(blank=True)),
                ('impact_assessment', models.TextField(blank=True)),
                ('processing_time_ms', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('validated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Prediction',
                'verbose_name_plural': 'Predictions',
                'ordering': ['-created_at'],
            },
        ),
    ]
