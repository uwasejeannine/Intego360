# Generated by Django 5.2.1 on 2025-06-03 20:49

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Academic Year',
                'verbose_name_plural': 'Academic Years',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='SchoolType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('level', models.CharField(choices=[('pre_primary', 'Pre-Primary'), ('primary', 'Primary'), ('lower_secondary', 'Lower Secondary'), ('upper_secondary', 'Upper Secondary'), ('tvet', 'TVET'), ('university', 'University')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('minimum_age', models.IntegerField(default=6)),
                ('maximum_age', models.IntegerField(default=18)),
                ('duration_years', models.IntegerField(default=6)),
            ],
            options={
                'verbose_name': 'School Type',
                'verbose_name_plural': 'School Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('school_code', models.CharField(max_length=20, unique=True)),
                ('cell', models.CharField(max_length=50)),
                ('village', models.CharField(max_length=50)),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('total_classrooms', models.IntegerField(default=0)),
                ('usable_classrooms', models.IntegerField(default=0)),
                ('has_electricity', models.BooleanField(default=False)),
                ('has_internet', models.BooleanField(default=False)),
                ('has_library', models.BooleanField(default=False)),
                ('has_laboratory', models.BooleanField(default=False)),
                ('has_computer_lab', models.BooleanField(default=False)),
                ('has_sanitation', models.BooleanField(default=False)),
                ('has_clean_water', models.BooleanField(default=False)),
                ('has_playground', models.BooleanField(default=False)),
                ('has_dormitory', models.BooleanField(default=False)),
                ('has_canteen', models.BooleanField(default=False)),
                ('student_capacity', models.IntegerField(default=0)),
                ('current_enrollment', models.IntegerField(default=0)),
                ('total_teachers', models.IntegerField(default=0)),
                ('qualified_teachers', models.IntegerField(default=0)),
                ('headteacher_name', models.CharField(blank=True, max_length=100)),
                ('headteacher_phone', models.CharField(blank=True, max_length=15)),
                ('deputy_headteacher_name', models.CharField(blank=True, max_length=100)),
                ('languages_of_instruction', models.CharField(blank=True, help_text='e.g., Kinyarwanda, English, French', max_length=100)),
                ('grade_levels_offered', models.CharField(blank=True, help_text='e.g., P1-P6, S1-S6', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_government_school', models.BooleanField(default=True)),
                ('is_boarding_school', models.BooleanField(default=False)),
                ('accreditation_status', models.CharField(choices=[('pending', 'Pending'), ('accredited', 'Accredited'), ('conditional', 'Conditional'), ('suspended', 'Suspended')], default='pending', max_length=20)),
                ('established_year', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schools', to='authentication.district')),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schools', to='authentication.sector')),
                ('school_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schools', to='education.schooltype')),
            ],
            options={
                'verbose_name': 'School',
                'verbose_name_plural': 'Schools',
                'ordering': ['district__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EducationAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('alert_type', models.CharField(choices=[('enrollment', 'Enrollment Alert'), ('performance', 'Performance Alert'), ('attendance', 'Attendance Alert'), ('infrastructure', 'Infrastructure Alert'), ('staffing', 'Staffing Alert'), ('dropout', 'Dropout Alert'), ('budget', 'Budget Alert'), ('examination', 'Examination Alert')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('recommended_actions', models.TextField()),
                ('resources_available', models.TextField(blank=True)),
                ('contact_person', models.CharField(max_length=100)),
                ('contact_phone', models.CharField(max_length=15)),
                ('schools_affected', models.IntegerField(default=0)),
                ('students_affected', models.IntegerField(default=0)),
                ('actions_taken', models.TextField(blank=True)),
                ('effectiveness_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_education_alerts', to=settings.AUTH_USER_MODEL)),
                ('districts', models.ManyToManyField(related_name='education_alerts', to='authentication.district')),
                ('schools', models.ManyToManyField(blank=True, related_name='education_alerts', to='education.school')),
                ('school_types', models.ManyToManyField(blank=True, related_name='alerts', to='education.schooltype')),
            ],
            options={
                'verbose_name': 'Education Alert',
                'verbose_name_plural': 'Education Alerts',
                'ordering': ['-created_at', '-severity'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=20, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('national_id', models.CharField(blank=True, max_length=16)),
                ('parent_guardian_name', models.CharField(max_length=100)),
                ('parent_guardian_phone', models.CharField(max_length=15)),
                ('parent_guardian_occupation', models.CharField(blank=True, max_length=50)),
                ('home_cell', models.CharField(max_length=50)),
                ('home_village', models.CharField(max_length=50)),
                ('current_grade_level', models.CharField(blank=True, max_length=10)),
                ('enrollment_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('completion_status', models.CharField(choices=[('enrolled', 'Currently Enrolled'), ('completed', 'Completed'), ('transferred', 'Transferred'), ('dropped_out', 'Dropped Out'), ('deceased', 'Deceased')], default='enrolled', max_length=20)),
                ('has_special_needs', models.BooleanField(default=False)),
                ('special_needs_description', models.TextField(blank=True)),
                ('fee_payment_status', models.CharField(choices=[('paid', 'Fully Paid'), ('partial', 'Partially Paid'), ('unpaid', 'Unpaid'), ('exempt', 'Exempt')], default='unpaid', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='students', to='education.school')),
                ('home_district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resident_students', to='authentication.district')),
                ('home_sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resident_students', to='authentication.sector')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_level', models.CharField(max_length=10)),
                ('enrollment_date', models.DateField()),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('enrollment_status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('transferred', 'Transferred'), ('dropped', 'Dropped Out'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('total_subjects', models.IntegerField(default=0)),
                ('subjects_passed', models.IntegerField(default=0)),
                ('overall_grade', models.CharField(blank=True, max_length=2)),
                ('class_rank', models.IntegerField(blank=True, null=True)),
                ('total_days', models.IntegerField(default=0)),
                ('days_attended', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='education.academicyear')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='education.school')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='education.student')),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
                'ordering': ['-academic_year__start_date', 'student__last_name'],
                'unique_together': {('student', 'school', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('category', models.CharField(choices=[('core', 'Core Subject'), ('optional', 'Optional Subject'), ('vocational', 'Vocational Subject'), ('language', 'Language Subject'), ('science', 'Science Subject'), ('arts', 'Arts Subject'), ('sports', 'Sports/Physical Education')], max_length=30)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school_levels', models.ManyToManyField(related_name='subjects', to='education.schooltype')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('teacher_id', models.CharField(max_length=20, unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('national_id', models.CharField(max_length=16, unique=True)),
                ('phone_number', models.CharField(max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('qualification_level', models.CharField(choices=[('certificate', 'Certificate'), ('diploma', 'Diploma'), ('bachelor', "Bachelor's Degree"), ('master', "Master's Degree"), ('phd', 'PhD')], max_length=30)),
                ('teaching_experience_years', models.IntegerField(default=0)),
                ('specialization', models.CharField(blank=True, max_length=100)),
                ('employment_type', models.CharField(choices=[('permanent', 'Permanent'), ('contract', 'Contract'), ('volunteer', 'Volunteer'), ('temporary', 'Temporary')], max_length=20)),
                ('employment_start_date', models.DateField()),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_qualified', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teachers', to='education.school')),
                ('subjects_taught', models.ManyToManyField(related_name='teachers', to='education.subject')),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='ExamResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exam_type', models.CharField(choices=[('monthly', 'Monthly Test'), ('midterm', 'Midterm Exam'), ('final', 'Final Exam'), ('national', 'National Exam')], max_length=20)),
                ('exam_date', models.DateField()),
                ('marks_obtained', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('total_marks', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('grade', models.CharField(blank=True, max_length=2)),
                ('passed', models.BooleanField(default=False)),
                ('comments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_results', to='education.enrollment')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_results', to='education.subject')),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_exams', to='education.teacher')),
            ],
            options={
                'verbose_name': 'Exam Result',
                'verbose_name_plural': 'Exam Results',
                'ordering': ['-exam_date'],
            },
        ),
        migrations.CreateModel(
            name='EducationTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_enrollment', models.IntegerField()),
                ('target_completion_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('target_pass_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('target_attendance_rate', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('target_classrooms', models.IntegerField(default=0)),
                ('target_teacher_student_ratio', models.FloatField(default=35.0)),
                ('target_qualified_teachers_percentage', models.FloatField(default=100.0)),
                ('allocated_budget', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('budget_for_infrastructure', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('budget_for_teaching_materials', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('budget_for_teacher_training', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('achieved_enrollment', models.IntegerField(default=0)),
                ('achieved_completion_rate', models.FloatField(default=0.0)),
                ('achieved_pass_rate', models.FloatField(default=0.0)),
                ('achieved_attendance_rate', models.FloatField(default=0.0)),
                ('budget_utilized', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='education.academicyear')),
                ('district', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education_targets', to='authentication.district')),
                ('set_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='set_education_targets', to=settings.AUTH_USER_MODEL)),
                ('school_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='education.schooltype')),
            ],
            options={
                'verbose_name': 'Education Target',
                'verbose_name_plural': 'Education Targets',
                'ordering': ['-academic_year__start_date', 'district__name'],
                'unique_together': {('district', 'school_type', 'academic_year')},
            },
        ),
    ]
